blueprint:
  name: "🐝 Wasps in tub"
  description: Bathroom presence detection
  domain: automation

  input:
    room_name:
      name: 📛 Room name
      description: "Room name, eg: bathroom"
    door_sensor:
      name: 🚪 Door sensor
      description: Box sensor
      selector:
        entity:
          domain: binary_sensor
          device_class: door
    motion_sensor:
      name: 🏃 Motion Sensor
      description: Wasp sensor
      selector:
        entity:
          domain: binary_sensor
          device_class: 
          - motion
          - occupancy
    motion_sensor_cooldown:
      name: 🥶 Motion sensor cooldown period
      description: How often does the motion sensor report motion events?
      selector:
        number:
          min: 1
          max: 300
          step: 1
          unit_of_measurement: seconds
    shower_sensor:
      name: 🚿 Shower Sensor
      description: Shower sensor
      selector:
        entity:
          domain: binary_sensor
          device_class: occupancy
    target_light:
      name: 💡 Light to control
      description: "Any light or light group"
      selector:
        entity:
          domain: light
    input_occupancy:
      name: 🚾 input_boolean that holds the current occupancy state
      description: "Needs to be created beforehand"
      selector:
        entity:
          domain: input_boolean
    input_timer:
      name: 🕝 timer that gets started when no occupancy is detected anymore
      description: "Needs to be created beforehand"
      selector:
        entity:
          domain: timer
    input_timeout:
      name: 🔢 input_number (minutes) for auto-off after occupancy ends / door-open motion
      description: "Needs to be created beforehand"
      selector:
        entity:
          domain: input_number
    ttl:
      name: 🌙 Time-to-Live
      description: How long to keep the lights on after leaving
      selector:
        number:
          min: 0
          max: 3600
          step: 1
          unit_of_measurement: seconds

mode: queued
max: 10
trace:
  stored_traces: 25

variables:
  blueprint_name: "wasps-in-tub"
  room_name: !input room_name

  door_sensor: !input door_sensor
  motion_sensor: !input motion_sensor
  target_light: !input target_light
  shower_sensor: !input shower_sensor

  input_occupancy: !input input_occupancy
  input_timeout: !input input_timeout
  input_timer: !input input_timer
  motion_sensor_cooldown: !input motion_sensor_cooldown
  ttl: !input ttl

  # Derived state at trigger time
  is_light_on: "{{ is_state(target_light, 'on') }}"
  is_door_open: "{{ is_state(door_sensor, 'on') }}"
  is_showering: "{{ is_state(shower_sensor, 'on') }}"
  timer_active: "{{ is_state(input_timer, 'active') }}"

  timeout_minutes: "{{ (states(input_timeout) | float(0)) | round(0) }}"
  timeout_seconds: "{{ (timeout_minutes | int(0)) * 60 }}"
  ttl_seconds: "{{ ttl | int(0) }}"

trigger:
  - platform: state
    entity_id: !input input_occupancy
    id: occupancy_detected
    to: 'on'
  - platform: state
    entity_id: !input input_occupancy
    id: occupancy_off
    to: 'off'

  - platform: state
    entity_id: !input motion_sensor
    id: motion_detected
    to: 'on'

  - id: showering
    platform: state
    entity_id: !input shower_sensor
    to: 'on'
  - id: showering_stopped
    platform: state
    entity_id: !input shower_sensor
    to: 'off'

  - platform: state
    entity_id: !input door_sensor
    id: door_opened
    to: 'on'
  - platform: state
    entity_id: !input door_sensor
    id: door_closed
    to: 'off'

  - platform: event
    event_type: timer.finished
    id: occupancy_timeout
    event_data:
      entity_id: !input input_timer

  - platform: state
    entity_id: !input target_light
    id: light_turned_off
    to: 'off'

  - platform: state
    entity_id: !input input_timeout
    id: timer_value_changed

condition: []

action:
  - choose:

    # --- Shower started ---
    - conditions:
        - condition: trigger
          id: showering
      sequence:
        - service: logbook.log
          data:
            name: '{{ blueprint_name }}@{{ room_name }}'
            message: 'shower started -> occupancy on, timer cancelled, light on'
            entity_id: !input target_light
        - service: light.turn_on
          target:
            entity_id: !input target_light
        - service: input_boolean.turn_on
          target:
            entity_id: !input input_occupancy
        - service: timer.cancel
          target:
            entity_id: !input input_timer

    # --- Shower stopped ---
    - conditions:
        - condition: trigger
          id: showering_stopped
      sequence:
        - service: logbook.log
          data:
            name: '{{ blueprint_name }}@{{ room_name }}'
            message: 'shower stopped -> start timeout'
            entity_id: !input target_light
        - service: timer.start
          data:
            duration:
              seconds: "{{ timeout_seconds | int }}"
          target:
            entity_id: !input input_timer

    # --- Motion detected ---
    - conditions:
        - condition: trigger
          id: motion_detected
      sequence:
        - service: logbook.log
          data:
            name: '{{ blueprint_name }}@{{ room_name }}'
            message: 'motion detected'
            entity_id: !input target_light
        - service: timer.cancel
          target:
            entity_id: !input input_timer
        - if:
            - condition: state
              entity_id: !input target_light
              state: "off"
          then:
            - service: light.turn_on
              target:
                entity_id: !input target_light
        - choose:
            # Door closed -> immediate occupancy
            - conditions:
                - condition: template
                  value_template: "{{ not (is_door_open | bool) }}"
              sequence:
                - service: input_boolean.turn_on
                  target:
                    entity_id: !input input_occupancy
            # Door open and not showering -> let motion settle, then start timeout
            - conditions:
                - condition: template
                  value_template: "{{ is_door_open and not is_showering }}"
              sequence:
                - wait_for_trigger:
                    - platform: state
                      entity_id: !input motion_sensor
                      to: "off"
                  timeout:
                    seconds: "{{ motion_sensor_cooldown | int }}"
                  continue_on_timeout: true
                - service: logbook.log
                  data:
                    name: '{{ blueprint_name }}@{{ room_name }}'
                    message: 'start timeout (door open, not showering)'
                    entity_id: !input target_light
                - service: timer.start
                  data:
                    duration:
                      seconds: "{{ timeout_seconds | int }}"
                  target:
                    entity_id: !input input_timer

    # --- Occupancy turned on ---
    - conditions:
        - condition: trigger
          id: occupancy_detected
      sequence:
        - if:
            - condition: state
              entity_id: !input target_light
              state: "off"
          then:
            - service: light.turn_on
              target:
                entity_id: !input target_light
        - if:
            - condition: template
              value_template: "{{ timer_active }}"
          then:
            - service: logbook.log
              data:
                name: '{{ blueprint_name }}@{{ room_name }}'
                message: 'timer cancelled (occupancy detected)'
                entity_id: !input target_light
            - service: timer.cancel
              target:
                entity_id: !input input_timer

    # --- Occupancy turned off ---
    - conditions:
        - condition: trigger
          id: occupancy_off
      sequence:
        - condition: and
          conditions:
            - condition: state
              entity_id: !input target_light
              state: "on"
            - condition: template
              value_template: "{{ not is_showering }}"
        - service: logbook.log
          data:
            name: '{{ blueprint_name }}@{{ room_name }}'
            message: 'start timeout (occupancy off)'
            entity_id: !input target_light
        - service: timer.start
          data:
            duration:
              seconds: "{{ timeout_seconds | int }}"
          target:
            entity_id: !input input_timer

    # --- Door opened ---
    - conditions:
        - condition: trigger
          id: door_opened
      sequence:
        - service: logbook.log
          data:
            name: '{{ blueprint_name }}@{{ room_name }}'
            message: 'door opened'
            entity_id: !input target_light
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ is_showering }}"
              sequence: []
          default:
            - service: input_boolean.turn_off
              target:
                entity_id: !input input_occupancy
            - if:
                - condition: state
                  entity_id: !input target_light
                  state: "off"
              then:
                - service: light.turn_on
                  target:
                    entity_id: !input target_light

    # --- Door closed ---
    - conditions:
        - condition: trigger
          id: door_closed
      sequence:
        - service: logbook.log
          data:
            name: '{{ blueprint_name }}@{{ room_name }}'
            message: 'door closed'
            entity_id: !input target_light
        - wait_for_trigger:
            - platform: state
              entity_id: !input motion_sensor
              to: "off"
          timeout:
            seconds: "{{ motion_sensor_cooldown | int }}"
          continue_on_timeout: true
        - choose:
            # If motion still on (or came back) -> occupancy on
            - conditions:
                - condition: state
                  entity_id: !input motion_sensor
                  state: "on"
              sequence:
                - service: logbook.log
                  data:
                    name: '{{ blueprint_name }}@{{ room_name }}'
                    message: 'long-lasting motion -> occupancy on'
                    entity_id: !input target_light
                - service: input_boolean.turn_on
                  target:
                    entity_id: !input input_occupancy
          default:
            - condition: template
              value_template: "{{ not is_showering }}"
            - service: logbook.log
              data:
                name: '{{ blueprint_name }}@{{ room_name }}'
                message: 'start TTL (door closed, motion off, shower off)'
                entity_id: !input target_light
            - service: timer.start
              data:
                duration:
                  seconds: "{{ ttl_seconds | int }}"
              target:
                entity_id: !input input_timer

    # --- Timer finished ---
    - conditions:
        - condition: trigger
          id: occupancy_timeout
      sequence:
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ is_showering }}"
              sequence:
                - service: logbook.log
                  data:
                    name: '{{ blueprint_name }}@{{ room_name }}'
                    message: 'timer finished but showering -> extend'
                    entity_id: !input target_light
                - service: timer.start
                  data:
                    duration:
                      seconds: "{{ timeout_seconds | int }}"
                  target:
                    entity_id: !input input_timer
            - conditions:
                - condition: state
                  entity_id: !input motion_sensor
                  state: "on"
                - condition: template
                  value_template: "{{ is_light_on and not is_showering }}"
              sequence:
                - service: logbook.log
                  data:
                    name: '{{ blueprint_name }}@{{ room_name }}'
                    message: 'timer finished, motion on -> extend'
                    entity_id: !input target_light
                - service: timer.start
                  data:
                    duration:
                      seconds: "{{ timeout_seconds | int }}"
                  target:
                    entity_id: !input input_timer
          default:
            - service: logbook.log
              data:
                name: '{{ blueprint_name }}@{{ room_name }}'
                message: >-
                  timed out, lights off!
                  (on time: {{
                    'n/a' if states(target_light) in ['unknown','unavailable']
                    else relative_time(states[target_light].last_changed)
                  }})
                entity_id: !input target_light
            - service: light.turn_off
              target:
                entity_id: !input target_light
            - service: input_boolean.turn_off
              target:
                entity_id: !input input_occupancy

    # --- Light turned off ---
    - conditions:
        - condition: trigger
          id: light_turned_off
      sequence:
        - service: timer.cancel
          target:
            entity_id: !input input_timer
        - service: input_boolean.turn_off
          target:
            entity_id: !input input_occupancy

    # --- Timeout value changed (minutes) ---
    - conditions:
        - condition: trigger
          id: timer_value_changed
      sequence:
        - condition: template
          value_template: "{{ timer_active }}"
        - service: logbook.log
          data:
            name: '{{ blueprint_name }}@{{ room_name }}'
            message: 'input_timeout changed -> restarting timer with new value'
            entity_id: !input target_light
        - service: timer.start
          data:
            duration:
              seconds: "{{ timeout_seconds | int }}"
          target:
            entity_id: !input input_timer
